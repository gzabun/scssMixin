//! Global Mixin
@mixin css3-prefix($prop, $value) {
    -webkit-#{$prop}: #{$value};
    -moz-#{$prop}: #{$value};
    -ms-#{$prop}: #{$value};
    -o-#{$prop}: #{$value};
    #{$prop}: #{$value};
}

@mixin transition($transition) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -ms-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}

//! Global Mixin
@mixin font-size-scale($max-width: 1366px, $min-break: 375px, $max: 6) {
    html {
        @for $i from 2 to $max {
            @media(max-width: $max-width - ceil(($max-width - $min-break)/($max - $i))) {
                font-size: 100% - ($i - 1)*6%;
            }
        }
    }
}

@mixin fill($color: '') {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    width: 100%;
    height: 100%;
    @if($color !='') {
        background-color: $color;
    }
}

@mixin input-placeholder {
    &.placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
    &::-webkit-input-placeholder {
        @content;
    }
}

@mixin link-colors($link, $visited, $hover, $active) {
    color: $link;
    &:visited {
        color: $visited;
    }
    &:hover,
    &:focus {
        color: $hover;
    }
    &:active {
        color: $active;
    }
}

@mixin link-hover {
    text-decoration: none;
    &:hover,
    &:focus {
        text-decoration: underline;
    }
}

@mixin before($display: block, $content: '') {
    &:before {
        display: $display;
        content: $content;
        @content;
    }
}

@mixin after($display: block, $content: '') {
    &:after {
        display: $display;
        content: $content;
        @content;
    }
}

@mixin font-face($font-name, $file-url, $file-name, $weight: normal, $style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: url($file-url + '/' + $file-name + '.eot');
        src: url($file-url + '/' + $file-name + '.eot?#iefix') format('embedded-opentype'),
        url($file-url + '/' + $file-name + '.woff') format('woff'),
        url($file-url + '/' + $file-name + '.ttf') format('truetype'),
        url($file-url + '/' + $file-name + '.svg##{$font-name}') format('svg');
        font-weight: $weight;
        font-style: $style;
    }
}

@mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, .4), $inset: "") {
    @if ($inset !="") {
        @include css3-prefix('box-shadow', $inset $x $y $blur $color);
    }
    @else {
        @include css3-prefix('box-shadow', $x $y $blur $color);
    }
}

@mixin alert($background:#002281, $color:#fff, $border-radius:8px) {
    display: flex;
    justify-content: space-between;
    max-width: 500px;
    padding: 15px 20px;
    box-sizing: border-box;
    align-items: center;
    font: 400 18px/24px "Roboto";
    color: $color;
    border-radius: $border-radius;
    background: $background;
}

@mixin triple-borders($colorOne: #3C3C3C, $sizeOne:1px, $colorTwo: #999999, $sizeTwo:1px, $colorThree: #000000, $sizeThree:1px, $radius: 0) {
    border: $sizeOne solid $colorOne;
    box-sizing: border-box;
    border-radius: $radius;
    @include css3-prefix('box-shadow', "0 0 0 1px #{$colorTwo}, 0 0 0 2px #{$colorThree}");
    margin-left: $sizeThree;
}

@mixin double-borders($colorOne: #3C3C3C, $sizeOne:1px, $colorTwo: #999999, $sizeTwo:1px, $radius: 0) {
    border: $sizeOne solid $colorOne;
    @include css3-prefix('box-shadow', 0 0 0 $sizeTwo $colorTwo);
    border-radius: $radius;
}

@mixin multicolor-gradient($direction, $colorList...) {
    $max: length($colorList);
    $w3cColors: '';
    @if $direction=='top' {
        $w3cColors: 'to bottom, ';
    }
    @else if $direction=='bottom' {
        $w3cColors: 'to top, '
    }
    @else if $direction=='left' {
        $w3cColors: 'to right, '
    }
    @else if $direction=='right' {
        $w3cColors: 'to left, '
    }
    @else {
        $w3cColors: '#{$direction}, ';
    }
    @for $i from 1 through $max {
        $w3cColors: #{$w3cColors + nth($colorList, $i)};
        @if $i < $max {
            $w3cColors: #{$w3cColors + ", "};
        }
    }
    background: linear-gradient($w3cColors);
}

@mixin truncate {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin dotTruncate($rowCount) {
    display: -webkit-box;
    -webkit-line-clamp: $rowCount;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

@mixin background($width, $height, $url, $horizantal:center, $vertical:center, $color:transparent, $display:inline-block) {
    @if type_of($horizantal)==number and type_of($vertical)==number {
        background: $color $url no-repeat $horizantal+#{'%'} $vertical+#{'%'};
    }
    @else if type_of($horizantal) !=number and type_of($vertical)==number {
        background: $color $url no-repeat $horizantal $vertical+#{'%'};
    }
    @else if type_of($horizantal)==number and type_of($vertical) !=number {
        background: $color $url no-repeat $horizantal+#{'%'} $vertical;
    }
    @else {
        background: $color $url no-repeat $horizantal $vertical;
    }
    @if(type_of($width)==number) {
        width: remCalculation($width);
    }
    @else {
        width: $width;
    }
    @if(type_of($height)==number) {
        height: remCalculation($height);
    }
    @else {
        height: $height;
    }
    display: $display;
}

@mixin scrollBarColor($width:3, $height:3, $radius:50%, $scColor:transparent, $thColor:#000) {
    &::-webkit-scrollbar {
        width: remCalculation($width);
        height: remCalculation($height);
        background: $scColor;
        border-radius: remCalculation($radius);
    }
    &::-webkit-scrollbar-button {
        display: none;
    }
    &::-webkit-scrollbar-thumb {
        background: $thColor;
        border-radius: remCalculation($radius);
    }
}

@mixin scrollBar {
    &::-webkit-scrollbar {
        width: remCalculation(5);
        height: remCalculation(5);
        background: #d3d3d3;
        border-radius: remCalculation(5);
    }
    &::-webkit-scrollbar-button {
        display: none;
    }
    &::-webkit-scrollbar-thumb {
        background: rgba(0, 0, 0, 0.25);
        border-radius: remCalculation(5);
    }
}

@mixin fontCalculation($weight, $font-size, $line-height, $font-family, $color, $opacity:1) {
    font: $weight $font-size/$globalRem+#{'rem'} #{'/'} $line-height/$globalRem+#{'rem'} $font-family;
    @include colorOpacity($color, $opacity)
}

@mixin colorOpacity($color, $opacity:1) {
    color: colorOpacity($color, $opacity);
}

@mixin arrow($direction: down, $size: 5px, $color: #555) {
    width: 0;
    height: 0;
    @if ($direction==left) {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
    }
    @else if ($direction==right) {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
    }
    @else if ($direction==down) {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
    }
    @else {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
    }
}

@mixin alert($background:#002281, $color:#fff) {
    display: flex;
    justify-content: space-between;
    max-width: remCalculation(500);
    padding: remCalculation(15) remCalculation(20);
    box-sizing: border-box;
    align-items: center;
    @include fontCalculation($normal, 18, 24, $roboto, #fff);
    color: $color;
    border-radius: remCalculation(8);
    background: $background;
}

@mixin borderImg($borderWidth, $url, $slice, $mode) {
    border: $borderWidth solid transparent;
    border-image: $url $slice $mode
}