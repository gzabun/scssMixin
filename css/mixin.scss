
//! Global Mixin
@mixin css3-prefix($prop, $value) {
    -webkit-#{$prop}: #{$value};
    -moz-#{$prop}: #{$value};
    -ms-#{$prop}: #{$value};
    -o-#{$prop}: #{$value};
    #{$prop}: #{$value};
}

@mixin transition($transition) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -ms-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}

//! Global Mixin
@mixin font-size-scale($max-width: 1366px, $min-break: 375px, $max: 6) {
    html {
        @for $i from 2 to $max {
            @media(max-width: $max-width - ceil(($max-width - $min-break)/($max - $i))) {
                font-size: 100% - ($i - 1)*6%;
            }
        }
    }
}

@mixin input-placeholder {
    &.placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
    &::-webkit-input-placeholder {
        @content;
    }
}

@mixin link-colors($link, $visited, $hover, $active) {
    color: $link;
    &:visited {
        color: $visited;
    }
    &:hover,
    &:focus {
        color: $hover;
    }
    &:active {
        color: $active;
    }
}


@mixin before($display: block, $content: '') {
    &:before {
        display: $display;
        content: $content;
        @content;
    }
}

@mixin after($display: block, $content: '') {
    &:after {
        display: $display;
        content: $content;
        @content;
    }
}

$font-set: ("light": 200, "regular": 400, "bold": 700, "black":900);
@mixin font-set($name,$url,$type) {
    @each $font-name,
    $font-weight in $font-set {
        @font-face {
            font-family: $name;
            src: url('#{$url}#{$font_weight}.#{$type}') format('opentype');
            font-weight: $font-weight;
            font-style: normal;
        }
    }
}


@mixin font-face($font-name,$file-url,$file-name,$weight: normal,$style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: url($file-url + '/' + $file-name + '.eot');
        src: url($file-url + '/' + $file-name + '.eot?#iefix') format('embedded-opentype'),
        url($file-url + '/' + $file-name + '.woff') format('woff'),
        url($file-url + '/' + $file-name + '.ttf') format('truetype'),
        url($file-url + '/' + $file-name + '.svg##{$font-name}') format('svg');
        font-weight: $weight;
        font-style: $style;
    }
}


$font-set: ("light": 200, "regular": 400, "bold": 700, "black":900);

@mixin font-face2($font-name,$file-url,$file-name,$style: normal) {
    @each $font-name,
    $font-weight in $font-set {
        @font-face {
            font-family: quote($font-name);
            src: url($file-url + '/' + $file-name + '.eot');
            src: url($file-url + '/' + $file-name + '.eot?#iefix') format('embedded-opentype'),
            url($file-url + '/' + $file-name + '.woff') format('woff'),
            url($file-url + '/' + $file-name + '.ttf') format('truetype'),
            url($file-url + '/' + $file-name + '.svg##{$font-name}') format('svg');
            font-weight: $font-weight;
            font-style: $style;
        }
    }
}

@mixin box-shadow($x: 2px,
$y: 2px,
$blur: 5px,
$color: rgba(0, 0, 0, .4),
$inset: "") {
    @if ($inset !="") {
        @include css3-prefix('box-shadow',
        $inset $x $y $blur $color);
    }
    @else {
        @include css3-prefix('box-shadow',
        $x $y $blur $color);
    }
}

@mixin alert($background:#002281,
$color:#fff,
$border-radius:8px) {
    display: flex;
    justify-content: space-between;
    max-width: 500px;
    padding: 15px 20px;
    box-sizing: border-box;
    align-items: center;
    font: 400 18px/24px "Roboto";
    color: $color;
    border-radius: $border-radius;
    background: $background;
}



@mixin double-borders($colorOne: #3C3C3C,
$sizeOne:1px,
$colorTwo: #999999,
$sizeTwo:1px,
$radius: 0) {
    border: $sizeOne solid $colorOne;
    @include css3-prefix('box-shadow',
    0 0 0 $sizeTwo $colorTwo);
    border-radius: $radius;
}


@mixin truncate {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}


@mixin lineClamp($line) {
    display: -webkit-box;
    -webkit-line-clamp: $line;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin background($width,
$height,
$url,
$repeat:no-repeat,
$horizantal:center,
$vertical:center,
$color:transparent,
$display:inline-block,
$bgSize:null) {
    background: $color $url $repeat $horizantal $vertical;
    width: $width;
    height: $height;
    display: $display;
    @if ($bgSize != null){
        background-size: $width;
    } @else {
        background: $bgSize;
    }
}


@mixin scrollBarColor($width:3px,
$height:3px,
$radius:50%,
$scColor:transparent,
$thColor:#000) {
    &::-webkit-scrollbar {
        width: $width;
        height: $height;
        background: $scColor;
        border-radius: $radius;
    }
    &::-webkit-scrollbar-button {
        display: none;
    }
    &::-webkit-scrollbar-thumb {
        background: $thColor;
        border-radius: $radius;
    }
}


@mixin fontCalculation($weight,
$font-size,
$line-height,
$font-family:none,
$color:transparent,
$opacity:1) {
    font: $weight $font-size/$globalRem*1rem #{'/'} $line-height/$globalRem*1rem;
    @if ($font-family != none){
        font-family:$font-family;
        
    }
    
    @if ($color != transparent){
        @include colorOpacity($color,$opacity);

    }
    
}

@mixin colorOpacity($color,$opacity:1) {
    color: colorOpacity($color, $opacity);
}

@mixin arrow($direction: down,
$size: 5px,
$color: #555) {
    width: 0;
    height: 0;
    @if ($direction==left) {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
    }
    @else if ($direction==right) {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
    }
    @else if ($direction==down) {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
    }
    @else {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
    }
}

@mixin borderImg($borderWidth,
$url,
$slice,
$mode) {
    border: $borderWidth solid transparent;
    border-image: $url $slice $mode
}

@mixin closeIcon($size,$width,$color,$opacity) {
    .close {
        position: relative;
        width: $size;
        height: $size;
        opacity: $opacity;
        cursor: pointer;
    }
    .close:hover {
        opacity: 1;
    }
    .close:before,
    .close:after {
        position: absolute;
        left: $size;
        content: ' ';
        height: $size;
        width: $width;
        background-color: $color;
    }
    .close:before {
        transform: rotate(45deg);
    }
    .close:after {
        transform: rotate(-45deg);
    }
}

@mixin chevron($width:10px,$height:10px,$thick:5px,$color:#000,$rotation:up){
 
    &:before{
      border-style: solid;
      border-width: $thick $thick 0 0;
      content: '';
      display: inline-block;
      height: $height;
      width: $width;
      @if ($rotation == up){
        transform: rotate(-45deg);
      } @else if ($rotation == 'right'){
        transform: rotate(45deg);
      } @else if ($rotation == 'left'){
        transform: rotate(225deg);
      } @else if ($rotation == 'down'){
        transform: rotate(-225deg);
      }
     
      @content;
    }
  
}

@mixin text-border($textColor,$borderColor,$width){
    -webkit-text-fill-color: $textColor;
    -webkit-text-stroke-color: $borderColor;
    -webkit-text-stroke-width: $width;
}


@mixin colorPalette($color){
    :root{     
        
        @for $i from 1 through 4{
        --color-darken-#{$i * 10}: darken($color,$i * 10deg);
        }
        
        @for $i from 1 through 4{
        --color-lighten-#{$i * 10}: lighten($color,$i * 10deg);
        }
        
        @for $i from 1 through 4{
        --color-adjust-hue-#{$i * 10}: adjust-hue($color,$i * -10deg);
        }
        
        @for $i from 1 through 4{
        --color-adjust-minus-hue-#{$i * 10}: adjust-hue($color,$i * 10deg);
        }
        
        @for $i from 1 through 4{
        --color-saturate-#{$i * 10}: saturate($color,$i * 10deg);
        }
        
        @for $i from 1 through 4{
        --color-desaturate-#{$i * 10}: desaturate($color,$i * 10deg);
        }
        
        @for $i from 1 through 4{
        --color-adjust-color-#{$i * 10}: adjust-color($color,$i * 10deg);
        }
        
        @for $i from 1 through 10{
        --color-change-color-#{$i * 10}: change-color($color,$i * 10deg);
        }
        
        --color-invert: invert($color);
        --color-complement: complement($color);
        --color-grayscale: grayscale($color);

    }
}


@mixin colorPalettes($color...){
  
    :root{     
 

        @each $single in $color{
            
            @for $i from 1 through 4{
                --color-darken-#{$i * 10}: darken($single,$i * 10deg);
            }
        
            @for $i from 1 through 4{
                --color-lighten-#{$i * 10}: lighten($single,$i * 10deg);
            }
            
            @for $i from 1 through 4{
                --color-adjust-hue-#{$i * 10}: adjust-hue($single,$i * -10deg);
            }
            
            @for $i from 1 through 4{
                --color-adjust-minus-hue-#{$i * 10}: adjust-hue($single,$i * 10deg);
            }
            
            @for $i from 1 through 4{
                --color-saturate-#{$i * 10}: saturate($single,$i * 10deg);
            }
            
            @for $i from 1 through 4{
                --color-desaturate-#{$i * 10}: desaturate($single,$i * 10deg);
            }
            
            @for $i from 1 through 4{
                --color-adjust-color-#{$i * 10}: adjust-color($single,$i * 10deg);
            }
            
            @for $i from 1 through 10{
                --color-change-color-#{$i * 10}: change-color($single,$i * 10deg);
            }
                
        }       

    }
}

@mixin multiple-text-underline($firstColor,$secondColor) { 
    box-shadow: inset 0 -1px $firstColor, inset 0 -2px $secondColor;
}

/**/
@mixin media-bp($sum1,$width,$sum2:null,$width2:null){
    @if ($sum2 != null or $width2 != null){
        @media screen and(#{$sum1}-width: $width) and (#{$sum2}-width: $width2){
            @content
        }
    } @else {
        @media screen and(#{$sum1}-width: $width){
            @content
        }
    }
    
}

@include media-bp(min,768px,max,1500px){
    color:red;
}

@mixin size($width,$height:null){
    @if ($height != null){
        width:$width;
        height:$height;
    } @else {
        width:$width;
        height:$width;
    }
}

@include size(10px,60px);

@mixin screen-mode($mode){
    @if ($mode != dark){
        @media (prefers-color-scheme: light){
            @content
        }
    } @else {
        @media (prefers-color-scheme: dark){
            @content
        }
    }
}


@include screen-mode(light){
    color:red;
}

@mixin media-bp-orientaion($sum1,$width,$orientation:null,$width2:null){
    @if ($width2 != null){
        @media screen and(min-width: $width) and (max-width: $width2) and (orientation: #{$orientation}){
            @content
        }
    } @else {
        @media screen and(#{$sum1}-width: $width) and (orientation: #{$orientation}){
            @content
        }
    }
}


@include media-bp-orientaion(min,25em,portrait,45em){
    color:red;
}